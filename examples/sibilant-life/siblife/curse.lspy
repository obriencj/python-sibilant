;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(def import-from sys stderr)

(def import-from curses
  wrapper
  mousemask BUTTON1_CLICKED
  KEY_UP KEY_DOWN KEY_LEFT KEY_RIGHT)

(def import-from itertools product repeat)
(def import-from time sleep)

(def import-from .life LifeBoard)


(define smilies
  (#tuple "\U0001f615"
	  "\U0001f610"
	  "\U0001f642"
	  "\U0001f600"
	  "\U0001f60e"))


(def function smilie-renderer [cell]
     (if cell
	 then: (#tuple (item smilies (% cell (len smilies))) 0)
	 else: (#tuple " " 0)))


(def function make-char-renderer [alive: "O" dead: " "]
     (setf alive (item alive 0))
     (setf dead (item dead 0))
     (lambda [cell]
       (if cell
	   then: (#tuple alive 0)
	   else: (#tuple dead 0))))


(def function digit-renderer [cell]
     (when (< 9 cell) (setq cell 9))
     (#tuple (if cell (str cell) " ") 0))


(def function get-renderer [by-name]
     (cond
      [(== by-name "smilies")
       smilie-renderer]

      [(== by-name "digits")
       digit-renderer]

      [else:
       (make-char-renderer)]))


(def class LifeScreen [object]

     (def function __init__ [self screen wrap: False renderer: None]

	  (when (None? renderer)
		(setf renderer (make-char-renderer)))
	  (setf self.renderer renderer)

	  (define-values [height width] (screen.getmaxyx))

	  (setf self.width (- width 2))
	  (setf self.height (- height 2))

	  (setf self.screen screen)

	  (setf self.board (LifeBoard self.width self.height wrap))
	  (setf self.age self.board.age)
	  (setf self.clear self.board.clear)
	  (setf self.randomize self.board.randomize)
	  (setf self.toggle self.board.toggle))


     (def function display [self]
	  (var [board self.board]
	       [render self.renderer]
	       [screen self.screen]
	       cell style)

	  (for-each [[[x y] value] (board.tracked cleanup: True)]
		    (setq-values [cell style] (render value))
		    (screen.attrset style)
		    (try
		     (screen.addch (+ 1 y) (+ 1 x) cell)
		     ([Exception as: e]
		      (raise! Exception (% " x: %r, y: %r, cell: %r"
					   (#tuple x y cell))))))

	  (screen.refresh))
     )


(def function erase-menu [stdscr menu-y]
     (stdscr.move menu-y 0)
     (stdscr.clrtoeol)

     (stdscr.move (+ menu-y 1) 0)
     (stdscr.clrtoeol)

     None)


(def function display-menu [stdscr menu-y]
     (erase-menu stdscr menu-y)

     (stdscr.addstr
      menu-y 4
      "Use the cursor keys to move, space or Enter to toggle cells")

     (stdscr.addstr
      (+ menu-y 1) 4
      "E)rase the board, R)andom fill, S)tep, C)ontinuous, Q)uit")

     (stdscr.attrset 0)

     None)


(def function step [stdscr board]
     (stdscr.addstr 0 0 "/")
     (stdscr.refresh)

     (board.age)
     (board.display)

     (stdscr.addstr 0 0 "\\")
     (stdscr.refresh)

     None)


(def function multi-step [stdscr board menu-y counter]

     (erase-menu stdscr menu-y)
     (stdscr.addstr menu-y 6 " Hit any key to stop and redraw ")

     (stdscr.refresh)
     (stdscr.nodelay 1)

     (for-each [index (range 1 (+ 1 counter))]
	       (stdscr.addstr 0 0 (str index))
	       (stdscr.refresh)
	       (board.age)

	       (unless (== -1 (stdscr.getch))
		       (break)))

     (board.display)

     (stdscr.nodelay 0)
     (display-menu stdscr menu-y)

     None)


(def function continuous-mode [stdscr board menu-y]

     (erase-menu stdscr menu-y)
     (stdscr.addstr menu-y 6 " Hit any key to stop ")

     (stdscr.refresh)
     (stdscr.nodelay 1)

     (while (== -1 (stdscr.getch))
	    (step stdscr board)
	    (sleep 0.1))

     (stdscr.nodelay 0)
     (display-menu stdscr menu-y)

     None)


(def function curses-main [stdscr options]

     (stdscr.clear)

     (define-values [y x] (stdscr.getmaxyx))

     (var [menu-y (- y 2)]
	  [board-window (stdscr.subwin (- y 1) x 0 0)]
	  [renderer (get-renderer options.renderer)]
	  [board (LifeScreen board-window options.wrap renderer)]
	  [y-pos (// y 2)]
	  [x-pos (// x 2)])

     (display-menu stdscr menu-y)
     (board.display)

     (while True
	    (setq y-pos (% y-pos board.height))
	    (setq x-pos (% x-pos board.width))
	    (stdscr.move (+ 1 y-pos) (+ 1 x-pos))

	    (define event (stdscr.getch))

	    (cond
	     [(and (< 0 event) (< event 256))
	      (setq event (chr event))

	      (cond
	       [(contains " \n" event)
		(board.toggle x-pos y-pos)
		(board.display)]

	       [(contains "Cc" event)
		(continuous-mode stdscr board menu-y)]

	       [(contains "Ee" event)
		(board.clear)
		(board.display)]

	       [(contains "Qq" event)
		(break)]

	       [(contains "Rr" event)
		(board.randomize)
		(board.display)]

	       [(contains "Ss" event)
		(step stdscr board)]

	       [(contains "1234567890" event)
		(multi-step stdscr board menu-y
			    (** 10 (str.index "1234567890" event)))]

	       [else: None])]

	     [(== event KEY_UP)
	      (decr y-pos)]

	     [(== event KEY_DOWN)
	      (incr y-pos)]

	     [(== event KEY_LEFT)
	      (decr x-pos)]

	     [(== event KEY_RIGHT)
	      (incr x-pos)]

	     [else: None]))

     None)


(def function cli [options]
     (wrapper curses-main options))


;;
;; The end.
