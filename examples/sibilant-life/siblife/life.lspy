;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(def import-from copy copy)
(def import-from itertools product repeat starmap)
(def import-from random random seed)


(def class LifeBoard [object]

     (def function __init__ [self width height wrap: False]

	  (setf self.width width)
	  (setf self.height height)
	  (setf self.wrap wrap)

	  (setf self.data (dict))

	  (self.clear))


     (def function clear [self]
	  " Clears all the data in the current board. Each position is
          set to the default state of dead. "

	  (define dat self.data)

	  ;; we set all the tracked values to dead, this will allow
	  ;; any display to see which coordinates to turn off, and the
	  ;; next call to tracked will clear the data
	  (for-each [key (dat.keys)]
		    (setf (item dat key) 0)))


     (def function randomize [self threshold: 0.5]
	  " Clears all the data in the current board. Each position on
          the board is then populated if a random value is greater
          than the given threasholy value.  A lower threshold will
          result in more of the board being filled, while a higher
          threshold will result in a more sparse board. "

	  (self.clear)
	  (seed)

	  (define all-coords
	    (product (range 0 self.width)
		     (range 0 self.height)))

	  (for-each [[x y] all-coords]
		    (when (< threshold (random))
			  (self.set-cell x y 1))))


     (def function tracked [self cleanup: True]
	  " Yields pairs of coordinates and cell values, where each
          coordinate is an integer representing the x and y axis.

          The returned items represent all of the known living cells,
          plus any recently deceased cells (in order to let any UI
          know to flip their display from living to dead).

          If cleanup is True (which is the default) then any recently
          deceased cells will be removed from the underlying data set
          afterwards. "

	  (var coord cell [data self.data])

	  (if cleanup
	      then: (for-each [item (list (data.items))]
			      (yield item)
			      (setq-values (coord cell) item)
			      (unless cell (del-item data coord)))
	      else: (yield-from (data.items))))


     (def function toggle [self x y]
	  " Flip a living cell to dead, or a dead cell to alive. "

	  (var [coord (#tuple x y)]
	       [cell (self.data.get coord None)])

	  (setf (item self.data coord) (if cell 0 1)))


     (def function coord-key [self x y]
          " Converts a coordinate into a key for internal storage, or
          None if the coordinate is not within the bounds of the board
          and wrapping is not enabled. "

	  (var [w self.width]
	       [h self.height])

	  (unless self.wrap
		  (unless (and (within? 0 w x) (within? 0 h y))
			  (return None)))

	  (#tuple (% x w) (% y h)))


     (def function get-cell [self x y]
	  (define key (self.coord-key x y))

	  (if (None? key)
	      then: 0
	      else: (self.data.get key 0)))


     (def function set-cell [self x y value]
	  (define key (self.coord-key x y))

	  (unless (None? key)
		  (setf (item self.data key) value)))


     (def function group-coord [self x y]
	  (product (values (- x 1) x (+ x 1))
		   (values (- y 1) y (+ y 1))))


     (def function get-group [self x y]
	  (starmap self.get-cell (self.group-coord x y)))


     (def function get-all-groups [self]
	  (starmap self.get-group (product (range 0 self.width)
					   (range 0 self.height))))


     (def function age [self]
	  " Update the state of this board to represent the next
            generation. "

	  (var [dat (#dict)]
	       [followup (#set)]
	       key x y)

	  ;; update all the cells that we already know are alive, and
	  ;; collect their neighbors for followup processing
	  (for-each [[key value] (self.tracked cleanup: False)]
		    (setq-values [x y] key)
		    (setf (item dat key) (life-rule (self.get-group x y)))
		    (followup.update (self.group-coord x y)))

	  ;; cut out the cells we've already processed from the
	  ;; followup coordinates
	  (followup.difference_update (self.data.keys))

	  ;; for each of the followup coordinates, calculate if it's
	  ;; alive or not.
	  (for-each [[x y] followup]
		    (setq key (self.coord-key x y))
		    (unless (None? key)
			    (setf (item dat key)
				  (life-rule (self.get-group x y)))))

	  ;; and that's our new data, done deal.
	  (setf self.data dat))


     (def function child [self]
	  " Create a copy of this board and age it to the next
            generation. "

	  (define kid (copy self))
	  (kid.age)
	  kid) )


(def function life-rule [group]
     " Given a group of nine cells, return the next state of the
       center cell following the rules for Conway's Game of Life. "

     ;; group starts as a generator, need to actualize it
     (setq group (tuple group))

     ;; state of the center of the group
     (var [center (item group 4)]
	  [living 0])

     ;; reduce is cool and all, but all those function calls hurt.
     (for-each [val group] (when val (incr living)))

     (if center
	 then: (if (within? 3 5 living)
		   then: (min (+ center 1) 9)
		   else: 0)
	 else: (if (== living 3)
		   then: 1
		   else: 0)))


;;
;; The end.
