#! /usr/bin/env sibilant

;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.



;; ===
;; this is some helper macros which might make their way into a
;; sibilant.site.flask module at some point.
;; ===

(def import-from flask Flask escape)
(def import-from werkzeug.routing parse_rule)


(defmacro url-rule [name rule . body]
  (define formals
    (iter-each [[converter _ignored name] (parse_rule (str rule))]
	       (symbol name) unless: (None? converter)))

  `(app.add_url_rule
    ,(str rule)
    endpoint: ,(str name)
    view_func: (function ,name (,@formals) ,@body)))


(defmacro declare-app [name]
  ;; Flask wants its application to be named app, so that's what we
  ;; bind it to.
  `(define app (Flask ,(str name))))


;;; === This is our actual app ===


;; one day, this will be how you'd import all the macros
;; (site-import flask)


(declare-app simple-flask)


(defmacro present-source [expr]
  `(#str "<div>" ,expr "</div>"
	 "<div><p>The source expression for this page was:</p>"
	 "<code>" ,(str (escape expr)) "</div></code>" ))


(url-rule
 index /

 (#fmt """
  <p>This is a simple web app. What more do you want?</p>
  <code>{(escape (locals))}</code>
  """))


(url-rule
 reverse-words /reverse/<words>

 (#fmt """
  <code>
  <p>\U0001f615 Original: {(escape words)}</p>
  <p>\U0001f60e Reversed: {(escape (item-slice words step: -1))}</p>
  <p>Locals: {(escape (locals))}</p></code>
  """))


;; you can either run this directly, or you can compile it to a .pyc
;; and invoke it from the flask cli
(when-main
 (app.run))


;;
;; The end.
