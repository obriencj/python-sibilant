;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.


(def import-from unittest TestCase)
(def import-from asynctest [TestCase as: AsyncTestCase])


(def class DefclassTest [TestCase]

     (def function test_def_class [self]

	  (def class simple [object]
	       (def function __init__ [self foo: 100]
		    (setf self.foo foo))

	       (def function get-foo [self] self.foo))

	  (define sinst (simple))

	  (self.assertIs (type simple) type)
	  (self.assertIs (type sinst) simple)
	  (self.assertEqual sinst.foo (sinst.get-foo))

	  None))


(def class CoroutineTest [AsyncTestCase]
     ;; as long as you name the object coro-echo, this wrapper is for you
     (macro-let [[testfn [macro-label def-expr . test-exprs]
                  `(def function ,(symbol (#fmt "test_{macro-label}")) [self]
                        ,def-expr
                        (var [input-atom (object)]
                             [res (self.loop.run_until_complete
                                    (coro-echo input-atom))])

                        (self.assertEqual res input-atom)
                        ,@test-exprs

                        None)]]

       ;; async function
       (testfn coroutine
         (define coro-echo (coroutine coro-echo [obj] obj)))

       ;; async def function
       (testfn def_coroutine
         (def coroutine coro-echo [obj] obj))

       ;; async lambda
       (testfn coro
         (define coro-echo (coro [obj] obj)))

       ;; async defun
       (testfn defcoro
         {(define pre-globals (frozenset (! keys (globals))))
          (defcoro coro-echo [obj] obj)}
         (define post-globals (frozenset (! keys (globals))))
         (self.assertEqual (- post-globals pre-globals)
                           (frozenset (#tuple "coro-echo")))))

     ;; async let
     (def function test_async_let [self]
          (define input-atom (object))
          (self.assertEqual
            (self.loop.run_until_complete
              (let& [[obj input-atom]] obj))
            input-atom)

          None))


(def class LabelsTest [TestCase]

     (def function test_even_odd [self]
	  (labels
	      [[even (x) (if (== x 0) then: True else: (odd (- x 1)))]
	       [odd (x) (if (== x 0) then: False else: (even (- x 1)))]]

	    (self.assertTrue (even 100))
	    (self.assertTrue (odd 101))
	    (self.assertFalse (even 101))
	    (self.assertFalse (odd 100))

	    None))


     (def function test_shadowed [self]

	  ;; create a function which definitely raises
	  (def function someone [] (raise! Exception))
	  (self.assertRaises Exception someone)

	  ;; now shadow that function in labels, and call the same
	  ;; name from another labels function
	  (labels
	      ((foo () (someone))
	       (someone () "Happy"))

	    ;; foo should see the shadowed copy
	    (self.assertEqual (foo) "Happy")

	    ;; so should this body
	    (self.assertEqual (someone) "Happy")

	    None))

     None)


(def class FLetTest (TestCase)

     (def function test_shadowed [self]

	  ;; create a function which definitely raises
	  (def function someone () (raise! Exception))
	  (self.assertRaises Exception someone)

	  ;; now shadow that function in labels, and call the same
	  ;; name from another labels function
	  (flet
	      [[foo () (someone)]
	       [someone () "Happy"]]

	    ;; foo sees the original copy of someone
	    (self.assertRaises Exception foo)

	    ;; however, this body sees the shadowed copy
	    (self.assertEqual (someone) "Happy")

	    None))

     None)


(def class MacroLetTest (TestCase)


     (def function test_simple [self]

	  (self.assertEqual

	   (macro-let
	    [[m1 [a b] `(+ ,a ,b)]
	     [m2 [a b] `(- ,a ,b)]]

	    (self.assertEqual (m1 10 5) 15)
	    (self.assertEqual (m2 10 5) 5)

	    (* (m1 10 5) (m2 10 5)))

	   (* 15 5))

	  None)


     (def function test_shadowed [self]
	  (macro-let
	   [[m1 [a b] `(+ ,a ,b)]]

	   (self.assertEqual (m1 10 5) 15)

	   (macro-let
	    [[m1 [a b] `(- ,a ,b)]]

	    (self.assertEqual (m1 10 5) 5))

	   (self.assertEqual (m1 10 5) 15))

	  None)

     None)


(def class BuildTest [TestCase]

     (def function test_build_list [self]
	  (define data
	    (#list 1 2 "hello" 'foo ':bar))

	  (self.assertTrue (list? data))
	  (self.assertEqual (len data) 5)

	  (self.assertEqual (item data 0) 1)
	  (self.assertEqual (item data 1) 2)
	  (self.assertEqual (item data 2) "hello")
	  (self.assertEqual (item data 3) 'foo)
	  (self.assertEqual (item data 4) ':bar)

	  None)


     (def function test_build_tuple [self]
	  (define data
	    (#tuple 1 2 "hello" 'foo ':bar))

	  (self.assertTrue (tuple? data))
	  (self.assertEqual (len data) 5)

	  (self.assertEqual (item data 0) 1)
	  (self.assertEqual (item data 1) 2)
	  (self.assertEqual (item data 2) "hello")
	  (self.assertEqual (item data 3) 'foo)
	  (self.assertEqual (item data 4) ':bar)

	  None)


     (def function test_build_dict [self]
	  (define data
	    (#dict ("foo" 100)
		   ("bar" 200)
		   ('tacos "yummy")
		   (None 'wut)))

	  (self.assertTrue (dict? data))
	  (self.assertEqual (len data) 4)

	  (self.assertEqual (item data "foo") 100)
	  (self.assertEqual (item data "bar") 200)
	  (self.assertEqual (item data 'tacos) "yummy")
	  (self.assertEqual (item data None) 'wut)

	  None)


     (def function test_build_set [self]
	  (define data
	    (#set 1 2 3 4 1 2 3 4 5))

	  (self.assertTrue (set? data))
	  (self.assertEqual (len data) 5)
	  (self.assertTrue (contains data 1))
	  (self.assertTrue (contains data 2))
	  (self.assertTrue (contains data 3))
	  (self.assertTrue (contains data 4))
	  (self.assertTrue (contains data 5))

	  None)

     None)


(def class FormatString [TestCase]

     """
     Verifies that the #fmt macro correctly functions
     """


     (def function test_escaped_fmt [self]

	  (self.assertEqual (#fmt "{{nothing") "{nothing")
	  (self.assertEqual (#fmt "{{nothing {0}") "{nothing 0")
	  (self.assertEqual (#fmt "{0} {{nothing") "0 {nothing")

	  None)


     (def function test_simple_fmt [self]
	  (def function stmt [count food]
	       (#fmt """I want {count} {food}."""))

	  (self.assertEqual "I want 1 taco."
			    (stmt 1 "taco"))

	  (self.assertEqual "I want 15 pizza."
			    (stmt 15 "pizza"))

	  None)


     (def function test_single_char_fmt [self]
	  (def function stmt [c f]
	       (#fmt """I want {c} {f}."""))

	  (self.assertEqual "I want 1 taco."
			    (stmt 1 "taco"))

	  (self.assertEqual "I want 15 pizza."
			    (stmt 15 "pizza"))

	  None)


     (def function test_spec_str_fmt [self]
	  (def function stmt [count food polite]
	       (#fmt """I want 0x{count "04x"} {food}"""
		     """{(if polite ", please" "")}."""))

	  (self.assertEqual "I want 0x0001 tacos, please."
			    (stmt 1 'tacos True))

	  (self.assertEqual "I want 0x000f pizza."
			    (stmt 15 'pizza False))

	  None)


     (def function test_spec_symbol_fmt [self]
	  (def function stmt [count food polite]
	       (#fmt """I want 0x{count '04x} {food}"""
		     """{(if polite ", please" "")}."""))

	  (self.assertEqual "I want 0x0001 tacos, please."
			    (stmt 1 'tacos True))

	  (self.assertEqual "I want 0x000f pizza."
			    (stmt 15 'pizza False))

	  None)


     (def function test_issue_212 [self]

          (self.assertEqual
           (#fmt "{0}")
           "0")

	  (self.assertEqual
	   (#fmt "{0} {1}")
	   "0 1")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)}")
	   "0 1 2")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)} {3}")
	   "0 1 2 3")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)} {3} {(+ 2 2)}")
	   "0 1 2 3 4")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5}")
	   "0 1 2 3 4 5")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5} {(+ 3 3)}")
	   "0 1 2 3 4 5 6")

	  (self.assertEqual
	   (#fmt "{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5} {(+ 3 3)} {7}")
	   "0 1 2 3 4 5 6 7")

	  None)

     (def function test_fstring_syntax [self]

          (self.assertEqual
           f"{0}"
           "0")

          (self.assertEqual
           f"{{}}"
           "{}")

          (self.assertEqual
           f"{{(+ 1 1)}}"
           "{(+ 1 1)}")

          (self.assertEqual
           f"{{{(+ 1 1)}}}"
           "{2}")

	  (self.assertEqual
	   f"{0} {1}"
	   "0 1")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)}"
	   "0 1 2")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)} {3}"
	   "0 1 2 3")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)} {3} {(+ 2 2)}"
	   "0 1 2 3 4")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5}"
	   "0 1 2 3 4 5")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5} {(+ 3 3)}"
	   "0 1 2 3 4 5 6")

	  (self.assertEqual
	   f"{0} {1} {(+ 1 1)} {3} {(+ 2 2)} {5} {(+ 3 3)} {7}"
	   "0 1 2 3 4 5 6 7")

	  None)

     ) ; FormatString


(def class Compose [TestCase]

     (def function test_compose [self]
	  (var [col (#list)]
	       [foo (compose
		     (lambda [x]
		       (! append col x)
		       (+ x 1))
		     (lambda [x]
		       (! append col x)
		       (* x 2))
		     (lambda [x]
		       (! append col x)
		       x)
		     float
		     (lambda [x]
		       (! append col x)
		       x)
		     str)]
	       [res (foo 101)])

	  (self.assertEqual col (#list 101 102 204 204.0))
	  (self.assertIs (type (item col -1)) float)
	  (self.assertIs (type res) str)
	  (self.assertEqual res "204.0")

	  None)
     ) ; Compose


;;
;; The end.
