;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.

;; Basic functionality of sibilant. This module is combined with the
;; bootstrap module to provide __builtins__ for other modules written
;; in sibilant.

;; author: Christopher O'Brien  <obriencj@gmail.com>
;; license: LGPL v.3


;; disable TCO for the following stuff, they don't need to bounce
(try
 (set-attr __compiler__ tco_enabled False)
 [[NameError] None])


;; === defines ===

(define-global defmacro
  (macro "defmacro"
   (function defmacro [name formals . body]
     "Defines a Macro instance in the current module"

     (define proper (proper? formals))
     `(define-global ,name
	((lambda [M] (set-attr M _proper ,proper) M)
	 (macro ,(str name) (function ,name ,formals ,@body)))))))


(defmacro defspecial [name formals . body]
     "Defines a Special instance in the current module"

     `(define-global ,name
	(special ,(str name) (function ,name ,formals ,@body))))


(defmacro defalias [name . body]
  "Defines an Alias Macro in the current module"
  `(define-global ,name
     (alias ,(str name) (function ,name [] ,@body))))


(defmacro defun [name params . body]
  "Defines a function with the given name in the current module"
  `(define-global ,name (function ,name ,params ,@body)))


(defmacro defclass [name bases . body]
  "Defines a class with the given name in the current module"
  `(define-global ,name (class ,name ,bases ,@body)))


(define parse-binding
  (let [[specials (attr (import sibilant.specials) specials)]]
    (partial specials._helper_binding (active-compiler))))


(defun symbolish? [thing]
  (or (symbol? thing) (lazygensym? thing)))


(defmacro var [*: variables]
  "
  (var BINDINGS...)

  where each BINDING is either a symbol or a pair in (SYM EXPR)
  format. Declares each binding symbol in the current scope, and
  optionally assigns it the value from EXPR
  "

  ;; (setq variables (to-tuple variables))
  `{,@(map (lambda [d]
	     (define sym d)
	     (define expr None)

	     (cond [(symbolish? d) None]
		   [else: (setq-values [sym expr] (parse-binding d))])
	     (cond [(is None expr) `(define ,sym)]
		   [else: `(define ,sym ,expr)]))

	   variables)})


(defmacro var-values [*: variables]
  "
  (var-values VALUES-BINDINGS ...)
  "

  `{,@(map (lambda [b] `(define-values ,@b))
	   variables)})


;; === reader macros and atom matchers ===

(defmacro _reader_macro [sym attrsym]
  `(defmacro ,sym args
     `(try
       (unless (None? __reader__)
	 ((attr __reader__ ,',attrsym) ,@args))
       ([NameError as: ne] None))))

(_reader_macro read read)
(_reader_macro read-atom read_atom)
(_reader_macro process-atom process_atom)
(_reader_macro set-event-macro set_event_macro)
(_reader_macro get-event-macro get_event_macro)
(_reader_macro clear-event-macro clear_event_macro)
(_reader_macro temp-event-macro temp_event_macro)
(_reader_macro set-macro-character set_macro_character)
(_reader_macro temp-macro-character temp_macro_character)
(_reader_macro set-atom-pattern set_atom_pattern)
(_reader_macro get-atom-pattern get_atom_pattern)
(_reader_macro clear-atom-pattern clear_atom_pattern)
(_reader_macro set-atom-regex set_atom_regex)


;; === conditionals ===

(defmacro if [condition then: True else: False]
  `(cond (,condition ,then)
	 (else: ,else)))


(defmacro when [condition . body]
  `(cond (,condition ,@body)
	 (else: None)))


(defmacro unless [condition . body]
  `(cond (,condition None)
	 (else: ,@body)))


;; === alternative looping ===

(defmacro until [test . body]
  `(while (not ,test) ,@body))


;; === easier attr calling ===

(defmacro ! [member inst_expr . args]
  `(,(reduce (lambda [a b] `(attr ,a ,b))
	     (member.rsplit ".")
	     inst_expr)
    ,@args))


(defmacro super args
  (unless args (! request_cell (active-compiler) '__class__))
  `(py-super ,@args))


(defmacro super! [method . args]
  `(! ,method (super) ,@args))


(defmacro has-attr [obj attr]
  `(hasattr ,obj ,(str attr)))


;; === math shortcuts ===

(defmacro incr [dest by: 1]
  `(setf ,dest (+ ,dest ,by)))


(defmacro decr [dest by: 1]
  `(setf ,dest (- ,dest ,by)))


;; === simple checks ===

(defmacro None? [value]
  `(is None ,value))


(defun within? [min_i max_i value_i]
  "
  (within? MIN MAX VALUE)

  True if  MIN <= VALUE < MAX
  "
  (and (<= min_i value_i) (< value_i max_i)))


(defmacro when-main body
  `(when (== __name__ "__main__") ,@body))


;; === easy slicing ===

(defmacro item-slice [sequence start: 'None stop: 'None step: 1]
  "
  (item-slice SEQUENCE)
  (item-slice SEQUENCE START)
  (item-slice SEQUENCE START STOP)
  (item-slice SEQUENCE START STOP STEP)
  (item-slice SEQUENCE start: START stop: STOP step: STEP)

  slices a sequence, with optional start, stop, and step parameters
  "
  (if (== step 1)
      then: `(item ,sequence (#slice ,start ,stop))
      else: `(item ,sequence (#slice ,start ,stop ,step))))


;; === compose raise and exception initializing

(defmacro raise! [exc_type . exc_args]
  `(raise (,exc_type ,@exc_args)))


(defmacro import1-from [package member]
  `(item (import-from ,package ,member) 0))


;; === optimized assert

(defmacro assert [expr message: None]
  """
  (assert EXPR)
  (assert EXPR message: VALUE)

  Raises an AssertionError if EXPR is not True. Optionally provides a
  VALUE expression which will be evaluated only if the assertion EXPR is
  not True.

  This macro honors the Python optimization flags, and will have no
  effect if sys.flags.optimize is non-zero
  """
  (unless sys.flags.optimize
	  (if (None? message)
	      then: `(unless ,expr (raise! AssertionError))
	      else: `(unless ,expr (raise! AssertionError ,message)))))


;; === setf and general variables ===

(let [[*gv-set-forms* (#dict)]
      [*gv-del-forms* (#dict)]]

  (defun gv-define-setter-fn [name fn]
    (set-item *gv-set-forms* name fn)
    None)

  (defmacro gv-define-setter [name formals . body]
    `(gv-define-setter-fn
      ',name
      (lambda ,formals ,@body)))

  (defmacro gv-define-simple-setter [name setter]
    `(gv-define-setter
      ,name (dest val) `(,',setter ,@dest ,val)))

  (defmacro setf [target value]

    ;; since sibilant is designed to expand macros lazily, we need to
    ;; jump ahead a bit and make sure that our target gets expanded
    ;; right now so that we can find the right dispatch method.
    (setq target (macroexpandq (globals) target))

    (cond
     [(symbolish? target)
      (if (contains (str target) ".")
	  then: { (define spltrgt (target.rsplit "." 1))
		  `(set-attr ,(item spltrgt 0) ,(item spltrgt 1) ,value) }
	  else:	`(setq ,target ,value))]

     [(and (proper? target) (contains *gv-set-forms* (car target)))
      ((item *gv-set-forms* (car target)) (cdr target) value)]

     [else:
      (raise! Exception (% "invalid setf target %s" target))]))


  (defun gv-define-del-fn [name fn]
    (set-item *gv-del-forms* name fn)
    None)

  (defmacro gv-define-del [name formals . body]
    `(gv-define-del-fn
      ',name
      (lambda ,formals ,@body)))

  (defmacro gv-define-simple-del [name del]
    `(gv-define-del
      ,name (dest) `(,',del ,@dest)))

  (defmacro delf [target]

    ;; since sibilant is designed to expand macros lazily, we need to
    ;; jump ahead a bit and make sure that our target gets expanded
    ;; right now so that we can find the right dispatch method.
    (setq target (macroexpandq (globals) target))

    (cond
     [(symbolish? target)
      (if (contains (str target) ".")
	  then: { (define spltrgt (target.rsplit "." 1))
		  `(del-attr ,(item spltrgt 0) ,(item spltrgt 1)) }
	  else:	`(delq ,target))]

     [(and (proper? target) (contains *gv-del-forms* (car target)))
      ((item *gv-del-forms* (car target)) (cdr target))]

     [else:
      (raise! Exception (% "invalid delf target %s" target))]))

  None)


(gv-define-simple-setter attr set-attr)
(gv-define-simple-setter car set-car)
(gv-define-simple-setter cdr set-cdr)
(gv-define-simple-setter item set-item)
(gv-define-simple-setter global setq-global)
(gv-define-simple-setter deref set-deref)
(gv-define-setter caar [val x] `(set-car (car ,x) ,val))

(gv-define-simple-del attr del-attr)
(gv-define-simple-del item del-item)
(gv-define-simple-del global delq-global)
(gv-define-simple-del deref del-deref)


;; === def general targets ===

(let [[*gd-targets* (#dict)]
      [*gd-scopes* (#dict)]]

  (defun gd-define-scope-fn [key fn]
    (set-item *gd-scopes* key fn)
    None)

  (defmacro gd-define-scope [name formals . body]
    `(gd-define-scope-fn
      (keyword ,name)
      (lambda ,formals ,@body)))

  (defmacro gd-define-simple-scope [name setter]
    `(gd-define-scope
      ,name [dest val] `(,,setter ,dest ,val)))

  (defun gd-define-target-fn [name fn]
    (set-item *gd-targets* name fn)
    None)

  (defmacro gd-define-target [name formals . body]
    `(gd-define-target-fn
      (symbol ',name)
      (lambda ,formals ,@body)))

  (defmacro gd-define-simple-target [name factory]
    `(gd-define-target ,name [setter source]
		       (setter (item source 0)
			       `(,,factory ,@source))))

  (defmacro def source
    (var [scope ':local]
	 [target None]
	 [d-scope None]
	 [d-target None])

    (if (keyword? (item source 0))
	then: (setq-values [scope target . source] source)
	else: (setq-values [target . source] source))

    (setq d-scope (dict.get *gd-scopes* scope None))
    (when (None? d-scope)
	  (raise! Exception (% "undefined def scope %r" scope)))

    (setq d-target (dict.get *gd-targets* target None))
    (when (None? d-target)
	  (raise! Exception (% "undefined def target %r" target)))

    (d-target d-scope source))

  None)


(gd-define-simple-scope ':local 'define)
(gd-define-simple-scope ':global 'define-global)
 ;; todo: thread-local


(gd-define-simple-target function 'function)
(gd-define-simple-target method 'method)
(gd-define-simple-target class 'class)
(gd-define-simple-target macro 'macro)


;; === def import and def import-from ==

(defun __import-binding [thing]
  (cond
   ((symbolish? thing)
    (return (#tuple None thing)))

   ((pair? thing)

    (try  ; (FOO as: BAR)
     (define-values [src [as [bind rest]]] thing)
     ([ValueError] None)
     (else:
      (when (and (nil? rest) (is ':as as))
	    (return (#tuple bind src)))))

    (try  ; (BAR FOO)
     (define-values [bind [src rest]] thing)
     ([ValueError] None)
     (else:
      (when (nil? rest)
	    (return (#tuple bind src)))))
    ))

  (raise! SyntaxError (% "bad binding form: %s" thing)))


(gd-define-target
 import [scopefn source]

 (def function sd [src]
      (define-values [binding module] (__import-binding src))
      (cond
       [(None? binding)
	(setq binding (item (module.split ".") 0))
	(scopefn binding `(import ,module))]

       [else:
	(define ats `(import ,module))
	(when (contains (str module) ".")
	  (setq ats (reduce (lambda [t h] `(attr ,t ,h))
			    (item-slice (module.split ".") start: 1)
			    ats)))
	(scopefn binding ats)]))

 `{,@(map sd source)})


(gd-define-target
 import-from [scopefn source]

 (var [module (item source 0)]
      [source (item-slice source start: 1)])

 (def function sd [src]
      (define-values [binding modsrc] (__import-binding src))
      (when (None? binding) (setq binding modsrc))
      (scopefn binding `(import1-from ,module ,modsrc)))

 `{,@(map sd source)})


;; === runtime macroexpand ===


(def import-from sibilant.compiler
     [macroexpand_1 as: macroexpandq-1]
     [macroexpand as: macroexpandq]
     [simple_parameters as: simple-parameters])

;; the macros just snag globals and quote the source, then pass them
;; on to the quoted expanders imported above
(defmacro macroexpand-1 [source]
  `(macroexpandq_1 (globals) ',source))

(defmacro macroexpand [source]
  `(macroexpandq (globals) ',source))


;; === flet and values ===

(defmacro labels [declarations . body]
  (setq declarations (tuple (declarations.unpack)))
  `(let [,@(map (lambda [d] `(,(car d) None)) declarations)]
     ,@(map (lambda [d] `(def function ,@d)) declarations)
     ,@body))


(defmacro flet [declarations . body]
  `(let [,@(map (lambda [d] `(,(car d) (lambda ,@(cdr d))))
		(declarations.unpack))]
     ,@body))


(defmacro let-values [bind_vals . body]
  """
  (let-values [BINDINGS VALS] . BODY)

  where BINDINGS is a nested pair of symbols in the same structure as
  values from VALS.
  """

  `(let []
     (define-values ,@bind_vals)
     ,@body))


(defmacro let* [bindings . body]
  `(let []
     (var ,@bindings)
     ,@body))


(defmacro let*-values [bindings . body]
  """
  (let*-values [[BINDINGS VALS]…] . BODY)

  where BINDINGS is a nested pair of symbols in the same structure as
  values from VALS, but like let* instead of let.
  """

  `(let []
     (var-values ,@bindings)
     ,@body))


(defmacro letrec [bindings . body]
  `(let []
     (var ,@(map (lambda [b] (item (parse-binding b) 0))
		 (bindings.unpack)))
     (var ,@bindings)
     ,@body))


;; === c_r magic ===

;; (defmacro c__r (atom)
;;   (unless (is str (type atom))
;;     (raise (Exception (% "what happened in c__r: %r" atom))))

;;   (define sb (attr (import "sibilant.builtins") builtins))
;;   (define sd sb.__dict__)

;;   (define found (dict.get sd atom None))

;;   (when (None? found)
;;     (define calls (reduce (lambda (cell atom-char)
;; 				  (cons (if (eq "a" atom-char) 'car 'cdr)
;; 					cell))
;; 				(item atom (slice -2 1 -1))
;; 				nil))

;;     (setq found
;; 	  (macro atom
;; 		 (lambda (value)
;; 		   `(,(if (eq "a" (item atom 1)) 'car 'cdr)
;; 		     (reduce (lambda (x y) (y x)) (values ,@calls)
;; 			     ,value)))))

;;     (print (found.expand 'TACO))

;;     (setf (item sd atom) found)
;;     None)

;;   (symbol atom))


;; (set-atom-regex 'c__r "c[ad]{2,}r" (lambda (atom) `(c__r ,atom)))

;; (defalias first 'car)
;; (defalias second 'cadr)
;; (defalias third 'caddr)
;; (defalias fourth 'cadddr)
;; (defalias fifth 'caddddr)
;; (defalias sixth 'cadddddr)
;; (defalias seventh 'caddddddr)


;; === python object system classes ==

(defmacro class [name bases . body]
  """
  (class NAME (parents... ) . BODY)

  Create a new python type instance with the given name, and parent
  class inheritance. The expressions of BODY are evaluated in order in
  their own local scope. The resulting locals are used to define the
  class members (functions, fields, etc.)

  Use (def class NAME (parents... ) . BODY) to bothe create and bind
  the class in the local namespace.
  """

  `(flet [[create-class [name fields *: bases metaclass: type]
			(metaclass name bases fields)]
	  [create-members [__module__]
			  (define __class__)
			  (define __classcell__ (refq __class__))
			  { ,@body }
			  (locals)]]

     (create-class ,(str name)
		   (create-members __name__)
		   ,@bases)))


(defmacro compile [source env: '(globals) filename: "<anon>"]
  """
  (compile SOURCE)

  Returns a python code object

  SOURCE may be one of the following:
   * IOBase stream from which to read and compile a single expression
   * str from which to parse and compile a single expression
   * cons pair representing source forms
   * symbol or keyword object

  (compile SOURCE env: DICT filename: \"filename.lspy\")

  Compiles SOURCE with DICT as the globals, with the source filename
  set to filename.lspy
  """

  `(let [[src ,source] [glbls ,env] [fname ,filename]]
     (def import-from io IOBase)
     (def import-from sibilant.parse source_stream source_str)
     (def import-from sibilant.module init_module parse_time compile_time)

     (var [stream
	   (cond [(isinstance src str) (source_str src fname)]
		 [(isinstance src IOBase) (source_stream src fname)]
		 [(or (pair? src) (symbolish? src) (keyword? src)) None]
		 [else: src])]
	  [mod (init_module glbls stream filename: fname)])

     (unless (or (pair? src) (symbolish? src) (keyword? src))
       (setq src (parse_time mod)))

     (compile_time mod src)))


(defmacro eval [source env: '(globals) filename: "<anon>"]
  """
  (eval SOURCE)

  Evaluates SOURCE with the current globals.

  SOURCE may be one of the following:
   * Python code object
   * IOBase stream from which to read and compile a single expression
   * str from which to parse and compile a single expression
   * cons pair representing source forms
   * symbol or keyword object

  (eval SOURCE env: DICT filename: "filename.lspy")

  Evaluates SOURCE with DICT as the globals, with the source filename
  set to filename.lspy
  """

  `(let [[src ,source] [glbls ,env] [fname ,filename]]
     (def import-from io IOBase)
     (def import-from types CodeType)
     (def import-from sibilant.parse source_stream source_str)
     (def import-from sibilant.module
	  init_module parse_time compile_time run_time)

     (cond
      [(isinstance src CodeType) (py-eval src glbls fname)]

      [else:
       (var [stream
	     (cond [(isinstance src str) (source_str src fname)]
		   [(isinstance src IOBase) (source_stream src fname)]
		   [(or (pair? src) (symbolish? src) (keyword? src)) None]
		   [else: src])]
	    [mod (init_module glbls stream filename: ,filename)])

       (unless (or (pair? src) (symbolish? src) (keyword? src))
	 (setq src (parse_time mod)))

       (run_time mod (compile_time mod src))])))


(let []
  (def import-from types CodeType)
  (def import-from dis dis [show_code as: show-code])

  (defun disassemble [obj details: False depth: -1]
    """
    (disassemble OBJ)
    (disassemble OBJ details: False depth: -1)

    display bytecode and optional constant and variable details

    A depth of -1 indicates that all constant code object will be
    recursively disassembled. When depth is 0, only the given object will
    be disassembled. When depth is greater than 0, constant code objects
    will be recursively disassembled until the given depth is reached.
    """

    (when (partial? obj) (setq obj obj.func))

    (print "From:" (repr obj))

    (when details
          (show-code obj)
          (print "Disassembly:"))
    (dis obj)

    (when depth
	  (when (has-attr obj __func__) (setq obj obj.__func__))
	  (when (has-attr obj __code__) (setq obj obj.__code__))
	  (when (has-attr obj gi_code) (setq obj obj.gi_code))
	  (when (has-attr obj co_consts)
		(for-each [c obj.co_consts]
			  (when (isinstance c CodeType)
				(print)
				(disassemble c details (- depth 1))))))))


(defmacro disassemble-expr [expr details: False depth: -1]
  """
  (disassemble-expr EXPR)
  (disassemble-expr EXPR details: False depth: -1)

  compiles EXPR, then decompiles it and displays the bytecode
  operations it would have executed.

  A depth of -1 indicates that all constant code object will be
  recursively disassembled. When depth is 0, only the given object will
  be disassembled. When depth is greater than 0, constant code objects
  will be recursively disassembled until the given depth is reached.
  """
  `(disassemble (compile ',expr) ,details ,depth))


;; === generator stuff ===

(defmacro send [iterator value]
  `((attr ,iterator send) ,value))


(defmacro iter-each [bindings emit *: () when: None unless: None]
  """
  (iter-each [BINDINGS SEQUENCE] EXPRESSION)
  (iter-each [BINDINGS SEQUENCE] EXPRESSION when: WHENTEST)
  (iter-each [BINDINGS SEQUENCE] EXPRESSION unless: UNLESSTEST)

  Produces an iterator which will yield the result of EXPRESSION,
  which is evaluated with the BINDINGS unpacked from each value from
  iterating over SEQUENCE. The optional when and unless forms may be
  specified as predicate expressions to be evaluated on each iteration
  to determine if the given values should be skipped.
  """

  (setq emit `(yield ,emit))
  (when unless (setq emit `(unless ,unless ,emit)))
  (when when (setq emit `(when ,when ,emit)))
  `(let [] (for-each ,bindings ,emit)))

(define #gen iter-each)


(define _gensym gensym)

(def function gensym [name: None]
  (var [active (active-compiler)])

  (if active
      then: (! gensym active name)
      else: (_gensym name)))


(defmacro list-each [bindings emit *: () when: None unless: None]
  """
  (list-each [BINDINGS SEQUENCE] EXPRESSION)
  (list-each [BINDINGS SEQUENCE] EXPRESSION when: WHENTEST)
  (list-each [BINDINGS SEQUENCE] EXPRESSION unless: UNLESSTEST)

  Produces a Python list whose elements are the result of EXPRESSION,
  which is evaluated with the BINDINGS unpacked from each value from
  iterating over SEQUENCE. The optional when and unless forms may be
  specified as predicate expressions to be evaluated on each iteration
  to determine if the given values should be skipped.
  """

  (var [storage (gensym 'list-each)]
       [append (gensym 'append)]
       [emit `(,append ,emit)])

  (when unless (setq emit `(unless ,unless ,emit)))
  (when when (setq emit `(when ,when ,emit)))

  `(let []
     (var [,storage (#list)]
	  [,append (attr ,storage append)])
     (for-each ,bindings ,emit)
     ,storage))

(define #lc list-each)


(defmacro set-each [bindings emit *: () when: None unless: None]
  """
  (set-each [BINDINGS SEQUENCE] EXPRESSION)
  (set-each [BINDINGS SEQUENCE] EXPRESSION when: WHENTEST)
  (set-each [BINDINGS SEQUENCE] EXPRESSION unless: UNLESSTEST)

  Produces a Python set whose elements are the result of EXPRESSION,
  which is evaluated with the BINDINGS unpacked from each value from
  iterating over SEQUENCE. The optional when and unless forms may be
  specified as predicate expressions to be evaluated on each iteration
  to determine if the given values should be skipped.
  """

  (var [storage (gensym 'set-each)]
       [append (gensym 'append)]
       [emit `(,append ,emit)])

  (when unless (setq emit `(unless ,unless ,emit)))
  (when when (setq emit `(when ,when ,emit)))

  `(let []
     (var [,storage (#set)]
	  [,append (attr ,storage add)])
     (for-each ,bindings ,emit)
     ,storage))

(define #sc set-each)


;; === some simple converters ===


(defun as-tuple [value]
  """
  (as-tuple VALUE)

  Converts VALUE to a tuple. If VALUE is a cons pair, will unpack
  it. Otherwise, VALUE will be iterated over and its contents
  collected.
  """

  (tuple
   (if (pair? value)
       then: (value.unpack)
       else: value)))


(defun as-list [value]
  """
  (as-list VALUE)

  Converts VALUE to a list. If VALUE is a cons pair, will unpack
  it. Otherwise, VALUE will be iterated over and its contents
  collected.
  """

  (list
   (if (pair? value)
       then: (value.unpack)
       else: value)))


(defun as-set [value]
  """
  (as-set VALUE)

  Converts VALUE to a set. If VALUE is a cons pair, will unpack
  it. Otherwise, VALUE will be iterated over and its contents
  collected.
  """

  (set
   (if (pair? value)
       then: (value.unpack)
       else: value)))


(defun length [value]
  """
  (length VALUE)

  The number of items in VALUE. If VALUE is a cons pair, will unpack
  it. Otherwise, identical to (len VALUE)
  """
  (if (pair? value)
      then: (value.length)
      else: (len value)))


;; === Have some MATH ===

;; nobody will ever use these, but I think it's amusing to have them
;; bound like this, ready to go.

(def import-from math
     inf [inf as: ∞] [isinf as: ∞?] [isinf as: inf?]
     [nan as: NaN] [isnan as: NaN?])

(var [-∞ (- ∞)]
     [-inf -∞])


;; === #fmt strings ===


(let []
  (def import-from re
       [compile as: regex] UNICODE VERBOSE)

  (def import-from sibilant.parse
       [default_reader as: reader] source_str)

  (define fmt-re
    (regex "(
    (\\n\\r|\\n)
    |{{
    |}}
    |(?:{([^\\(^\\!\\:}]+
         |\\(.*\\))(\\!.)?([^}]+)?)}
    )" (+ UNICODE VERBOSE)))

  (def function parse-source [src-str]
       (reader.read (source_str src-str "<format string>")))

  (defmacro #fmt [text . rest]
    (var [result (#list)]
	 [offset 0])

    (for-each [f (fmt-re.finditer text)]
        (define-values [start stop] (f.span))
	(result.append (item-slice text offset start))
	(setq offset stop)

	(var [g (f.groups)]
	     [c (item g 0)])

	(if (contains (#tuple "{{" "}}" "\n" "\n\r") c)
	    then: (result.append (item c 0))
	    else:
	    { (var [expr (parse-source (item g 2))]
		   [conv (item g 3)]
		   [fmt (item g 4)])

	      (setq expr
		    (cond
		     [(not conv) expr]
		     [(== "!r" conv)
		      `(repr ,expr)]
		     [(== "!s" conv)
		      `(str ,expr)]
		     [(== "!a" conv)
		      `(ascii ,expr)]
		     [else:
		      (raise! Exception
			      (% "bad format conversion %r" conv))]))

	      (when fmt
		(setq fmt (item-slice fmt 1)))

	      (setq expr
		    (if fmt
			then: `(format ,expr ,fmt)
			else: `(format ,expr)))

	      (result.append expr) }))

    (result.append (item-slice text offset))

    (if rest
	then: `(#str ,@result (#fmt ,@rest))
	else: `(#str ,@result))))


(defmacro defrecord [name fields]
  `(def class ,name []
	(def function __init__ [self ,@fields]
	     ,@(iter-each [field (unpack fields)]
		   `(set-attr self ,field ,field)))))


(defmacro compiler-tco-disable []
  (try
   { (set-attr (active-compiler) tco_enabled False)
     'True }
   [[Exception as: e]
    `{ (print "a compile-time error prevented tco from being disabled: "
	      ,e)
       False }]))


(defmacro compiler-tco-enable []
  (try
   { (set-attr (active-compiler) tco_enabled True)
     'True }
   [[Exception as: e]
    `{ (print "a compile-time error prevented tco from being enabled: "
	      ,e)
       False }]))


; == some gensym magic

(defun swap-symbols [swaptable source]

  (when (nil? source) (return nil))

  (var [result (copy source)])

  (labels
   [[swapit [v]
     (cond
      [(symbolish? v) (swaptable.get v v)]
      [(nil? v) nil]
      [(pair? v) (swap-symbols swaptable v)]
      [else: v])]]

   ; (setf (car result) (swapit (car result)))
   (for-each [p (result.follow)]
       (unless (nil? p)
	 (setf (car p) (swapit (car p))))))

  ; (print (#fmt "swap-symbols
  ; source {(str source)}
  ; result {(str result)}"))

  result)


(defmacro with-gensyms [symnames . body]
  """
  (with-gensyms [SYMBOL...] . BODY)

  Creates gensyms for each SYMBOL, and returns a copy of BODY with
  each SYMBOL replaced with its gensym counterpart.
  """

  (var [symtable (dict (#lc [sym (! unpack symnames)]
			    (cons sym (gensym sym))))])

  `{,@(map (partial swap-symbols symtable) body)})


(defmacro let-gensyms [bindings . body]
  """
  (let-gensyms [[SYM BINDING]...] . BODY)

  Creates gensyms for each SYM and binds to that instead of the
  original name
  """

  (var [decls (#list)]
       [swaps (#dict)])

  (for-each [[sym val] (map parse-binding (! unpack bindings))]
	    (var [gsym (gensym sym)])
	    (! append decls (cons gsym val nil))
	    (setf (item swaps sym) gsym))

  `(let [,@decls] ,@(map (partial swap-symbols swaps) body)))


(defmacro letrec-gensyms [bindings . body]
  """
  (letrec-gensyms [[SYM BINDING]...] . BODY)
  """

  (var [decls (#list)]
       [swaps (#dict)])

  (for-each [[sym val] (map parse-binding (! unpack bindings))]
	    (var [gsym (gensym sym)])
	    (! append decls (cons gsym val nil))
	    (setf (item swaps sym) gsym))

  `(letrec [,@decls] ,@(map (partial swap-symbols swaps) body)))


;; === for setting up __all__


(defmacro export syms
  """
  (export SYMBOL...)

  Adds each SYMBOL to the global __all__ list. Ensures __all__ is
  both sorted and unique.
  """

  `(let-gensyms [[_all_ (! get (globals) "__all__" (#list))]]
     (! extend _all_ (#list ,@(map str syms)))
     (setf (global __all__) (sorted (set _all_)))))


;; === macro-let ====

;; macro-let needs to be a special, because it compiles all the way
;; down and doesn't result in an expanded form. If it were a macro, it
;; wouldn't be able to do this, as a macro always expands into
;; something.
(defspecial macro-let [comp source tc]
  (define-values [called-by [declarations body]] source)

  (define tmp-macros
    (eval
     `(#dict
       ,@(#gen [[macro-name [macro-formals macro-body]]
		(unpack declarations)]

	    `(',macro-name
	      ((lambda [M]
		 (set-attr M _proper ,(proper? macro-formals))
		 M)
	       (macro ,(str macro-name)
		 (function ,macro-name ,macro-formals
			   ,@macro-body))))))))

  (with [_ (! tmp_compiled comp tmp-macros)]
	(! compile comp `{,@body} tc None)))


;;
;; The end.
