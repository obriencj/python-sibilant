;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this library; if not, see
;; <http://www.gnu.org/licenses/>.

;; Basic functionality of sibilant. This module is combined with the
;; bootstrap module to provide __builtins__ for other modules written
;; in sibilant.


(doc "
sibilant.cli

Command-Line Interface for sibilant

author: Christopher O'Brien <obriencj@gmail.com>
license: LGPL v.3
")


(def import sys)
(def import-from os.path basename)

(def import-from .module new_module init_module load_module compile_to_file)
(def import-from .parse source_open)
(def import-from .repl repl)


(define DEFAULT_HISTFILE None)


(def class CLIException [Exception])


(def function cli_compile [options]

     (var [builtins_name (when options.bootstrap "sibilant.bootstrap")]
	  [filename options.filename]
	  [pkg (or options.compile options.bootstrap)])

     (unless filename
       (raise! CLIException "no filename provided for compilation"))

     (define modname
       (cond
	[(filename.endswith ".lspy")
	 (item-slice filename stop: -5)]
	[(filename.endswith ".sibilant")
	 (item-slice filename stop: -9)]
	[else:
	 (raise! CLIException "filename should end in .lspy or .sibilant")]))

     (var [destfile (#str modname ".pyc")]
	  [name (if (== modname "__init__")
		    then: pkg else: (#str pkg "." modname))])

     (compile_to_file name pkg filename destfile builtins_name: builtins_name))


(def function cli [options]
     " The sibilant command line interface "

     (define filename options.filename)

     (cond
      [filename
       (setf sys.argv (#list filename))
       (sys.argv.extend options.args)]
      [else:
       (setf sys.argv options.args)])

     (when options.tweakpath
	   (sys.path.insert 0 "."))

     (when (or options.compile options.bootstrap)
	   (return (cli_compile options)))

     (define mod (new_module "__main__"))

     (when filename
	   (with [(source_open filename) as: source]
		 (setq mod (init_module mod source))
		 (load_module mod))

	   (unless options.interactive
		   (return)))

     (repl mod))


(defmacro arguments [parent . args]
  `(let [[_add_argument_ (attr ,parent add_argument)]]
    ,@(iter-each
       [[name params] args]
       {(define names (if (pair? name)
			  then: (map str (name.unpack))
			  else: (#tuple (str name))))
	`(_add_argument_ ,@names ,@params)})))


(def function cli-option-parser [name]
     " Create an `ArgumentParser` instance with the options needed for
       the `cli` function "

     (def import-from argparse ArgumentParser REMAINDER)

     (define parser (ArgumentParser prog: (basename name)))

     (arguments
      parser

      [-O
       dest: "optimize" action: "store_true" default: False
       help:
       "Disable assert expressions"]

      [--no-tweak-path
       dest: "tweakpath" action: "store_false" default: True
       help:
       "Do not add the current directory to sys.path"]

      [--histfile
       dest: "histfile" action: "store" default: DEFAULT_HISTFILE
       help:
       "REPL history file"])

     (arguments
      (parser.add_mutually_exclusive_group)

      [[-i --interactive]
       dest: "interactive" action: "store_true" default: False
       help:
       "Enter interactive mode after executing the given script"]

      [[-C --compile]
       dest: "compile" action: "store" default: None
       help:
       "Compile the file into a .pyc in the specified package"]

      [[-B --bootstrap-compile]
       dest: "bootstrap" action: "store" default: None
       help:
       "Compile the file into a .pyc in the specified package,
        using only bootstrap builtins"])

     (arguments
      (parser.add_mutually_exclusive_group)

      ;; [-m
      ;;  dest: "module" action: "store" default: None
      ;;  help:
      ;;  "Load module and run as a script"]

      [filename
       nargs: "?" default: None
       help:
       "Run filename as a script"])

     (arguments
      parser
      [args nargs: REMAINDER default: (#list)])

     parser)


(def function main [argv: None]
     " Entry point for the sibilant command-line interface "

     (when (None? argv)
	   (setq argv sys.argv))

     (define-values [name . args] argv)

     (var [parser (cli-option-parser name)]
	  [options (parser.parse_args args)])

     (when (and options.optimize (== 0 sys.flags.optimize))
	   ;; Python won't let us set the optimize flag ourselves, we
	   ;; have to actively restart the environment with -O in
	   ;; order to flip that on. So detect if the option is set
	   ;; but debug mode is not on, and then restart as needed
	   (def import-from os execl)
	   ; (argv.remove "-O")
	   (execl sys.executable sys.executable "-O" *: argv))

     (try
      (cli options)

      ([KeyboardInterrupt]
       (print file: sys.stderr)
       130)

      (else: 0)))


(when-main
 (sys.exit (main)))


;; The end.
