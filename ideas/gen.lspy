

(defmacro funpack (formals *: body)
  (cond ((pair? formals)
	 `(partial apply (lambda ,formals ,@body)))
	((symbol? formals)
	 `(lambda (,formals) ,@body))
	(else
	 (raise (Exception "wtf even?")))))


(defmacro lets (bindings . body)
  (doc "(lets (FORMALS EXPR) BODY...)\n"
       "binds EXPR to FORMALS, then evaluates the expressions of BODY"
       "in order, returning the last value")
  `((funpack ,(first bindings) ,@body) ,(second bindings)))


(defmacrolet var 'define-local)

(defmacro lc (work for: '_ in: () when: None unless: None)
  (var test
       (cond ((and when unless)
	      `(funpack ,for (when ,when (unless ,unless True))))
	     ((if when True False)
	      `(funpack ,for (when ,when True)))
	     ((if unless True False)
	      `(funpack ,for (unless ,unless True)))
	     (else None)))

  (unless (is None test)
    (setq in `(filter ,test ,in)))

  `(map (funpack ,for ,@work) ,in))


;; (lc (FORMALS BODY) ITERABLE)


(defmacrolet seq '(range 0 10))
(define wut (lc (+ "wut " a) a seq (& 1 a)))

(print wut)
(print (tuple wut))

;;(macroexpand-1 (lc ((a b) (+ a b))
;;		(zip (range 0 5) (range 5 10))
;;		((a b) (& 1 a))))

(define wut (lc (make-tuple a b (+ a b))
		(a b)
		(zip (range 0 5) (range 5 10))
		(& 1 a)))

;;(define wut (lc (a (make-tuple "wut" a))
;;		(range 0 5)
;;		(a (& 1 a))))

(print wut)
(print (tuple wut))


(lets ((a b: 0 c: 0 *: rest) (range 0 2))
  (print a b c rest))

(lets ((a b: 0 c: 0 *: rest) (range 0 10))
  (print a b c rest))
